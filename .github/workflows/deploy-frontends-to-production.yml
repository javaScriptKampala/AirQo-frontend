name: deploy-to-production

on:
  workflow_dispatch:
    inputs:
      platform:
        description: "Deploy [Legacy] Platform"
        required: false
        type: boolean
      website:
        description: "Deploy Website"
        required: false
        type: boolean
      calibrate_app:
        description: "Deploy Calibrate app"
        required: false
        type: boolean
      next_platform:
        description: "Deploy Analytics Platform"
        required: false
        type: boolean
      docs:
        description: "Deploy Docs"
        required: false
        type: boolean

jobs:
  image-tag:
    name: create image tag
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.prep.outputs.build_id }} # build id
      datetime: ${{ steps.prep.outputs.datetime }} # build date
    steps:
      - name: generate build ID
        id: prep
        run: |
          sha=${GITHUB_SHA::8}
          timestamp=$(date +%s)
          datetime=$(date)
          echo "build_id=prod-${sha}-${timestamp}" >>$GITHUB_OUTPUT
          echo "datetime=${datetime}" >>$GITHUB_OUTPUT

  ### deploy platform ###
  platform:
    name: build-push-deploy-netmanager
    needs: [image-tag]
    if: inputs.platform == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google login
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Create .env file
        run: gcloud secrets versions access latest --secret="prod-env-netmanager" > netmanager/.env

      - name: NPM Setup and Build
        uses: actions/setup-node@v2
        with:
          node-version: "12"
      - run: |
          cd netmanager/
          npm install
          CI=false npm run build

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Build and Push Docker Image
        run: |
          cd netmanager/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-platform-frontend:${{ needs.image-tag.outputs.build_id }} .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-platform-frontend:${{ needs.image-tag.outputs.build_id }}
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-platform-frontend:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-platform-frontend:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-platform-frontend:latest

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Deploy to K8S
        run: |
          echo "=============== Update the corresponding configmap ==============="
          kubectl create configmap --dry-run=client -o yaml --from-env-file=netmanager/.env env-platform-production | kubectl replace -f - -n production
          echo "=============== Deploy the application ==============="
          kubectl apply -f k8s/netmanager/prod-airqo-platform-frontend.yaml
          kubectl set image deployment/airqo-platform-frontend airqo-platform=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-platform-frontend:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-platform-frontend kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-platform-frontend:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production

  ### deploy website ###
  website:
    name: build-push-deploy-website
    needs: [image-tag]
    if: inputs.website == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCP_FRONTEND_PROJECT_SA_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Google login
        uses: google-github-actions/auth@v0
        with:
          credentials_json: "${{ secrets.GCP_FRONTEND_PROJECT_SA_CREDENTIALS }}"

      - name: Setup Cloud SDK
        uses: "google-github-actions/setup-gcloud@v0"

      - name: Create google_application_credentials.json file
        id: create-google-application-credentials-file
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "google_application_credentials.json"
          json: ${{ secrets.GCP_FRONTEND_PROJECT_SA_CREDENTIALS }}
          dir: "website/"

      - name: Create app.yaml and .env.yaml files
        run: |
          cd website/
          echo "========== Creating app.yaml file =========="            
          echo "runtime: python" > app.yaml
          echo "env: flex" >> app.yaml
          echo "service: default" >> app.yaml
          echo "includes:" >> app.yaml
          echo "  - .env.yaml" >> app.yaml
          echo "========== Creating .env.yaml file =========="  
          echo "env_variables:" > .env.yaml
          echo "  SECRET: ${{ secrets.WEBSITE_SECRET }}" >> .env.yaml
          echo "  CLOUDINARY_KEY: ${{ secrets.WEBSITE_CLOUDINARY_KEY }}" >> .env.yaml
          echo "  CLOUDINARY_NAME: ${{ secrets.WEBSITE_CLOUDINARY_NAME }}" >> .env.yaml
          echo "  CLOUDINARY_SECRET: ${{ secrets.WEBSITE_CLOUDINARY_SECRET }}" >> .env.yaml
          echo "  DATABASE_URI: ${{ secrets.WEBSITE_PROD_DATABASE_URI }}" >> .env.yaml
          echo "  GS_BUCKET_NAME: ${{ secrets.WEBSITE_PROD_GS_BUCKET_NAME }}" >> .env.yaml
          echo "  REACT_WEB_STATIC_HOST: ${{ secrets.WEBSITE_PROD_REACT_WEB_STATIC_HOST }}" >> .env.yaml
          echo "  SECRET_KEY: ${{ secrets.WEBSITE_PROD_SECRET_KEY }}" >> .env.yaml
          echo "  DJANGO_ALLOWED_HOSTS: ${{ secrets.WEBSITE_DJANGO_ALLOWED_HOSTS }}" >> .env.yaml
          echo "  DEBUG: False" >> .env.yaml
          echo "  GOOGLE_APPLICATION_CREDENTIALS: /app/google_application_credentials.json" >> .env.yaml

      - name: Build and Push Docker Image
        run: |
          cd website/
          docker build . \
          --build-arg REACT_WEB_STATIC_HOST=${{ secrets.WEBSITE_PROD_REACT_WEB_STATIC_HOST }} \
          --build-arg REACT_NETMANAGER_BASE_URL=${{ secrets.WEBSITE_PROD_REACT_NETMANAGER_BASE_URL }} \
          --build-arg REACT_APP_BASE_AIRQLOUDS_URL=${{ secrets.WEBSITE_REACT_APP_BASE_AIRQLOUDS_URL }} \
          --build-arg REACT_APP_BASE_NEWSLETTER_URL=${{ secrets.WEBSITE_REACT_APP_BASE_NEWSLETTER_URL }} \
          --build-arg REACT_APP_WEBSITE_BASE_URL=${{ secrets.WEBSITE_PROD_REACT_APP_WEBSITE_BASE_URL }} \
          --build-arg REACT_APP_AUTHORIZATION_TOKEN=${{ secrets.WEBSITE_PROD_REACT_APP_AUTHORIZATION_TOKEN }} \
          --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-website:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-website:${{ needs.image-tag.outputs.build_id }}
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-website:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-website:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-website:latest

      - name: Deploy to App Engine
        run: |-
          cd website/
          gcloud app deploy  \
            --image-url=${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-website:latest \
            --project=${{ secrets.FRONTEND_PROJECT_ID }} \
            --quiet

  ### calibrate app ###
  calibrate-app:
    name: build-push-deploy-calibrate-app
    needs: [image-tag]
    if: inputs.calibrate_app == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google login
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Create .env file
        run: gcloud secrets versions access latest --secret="prod-env-calibrate-app" > calibrate/.env

      - name: NPM Setup and Build
        uses: actions/setup-node@v2
        with:
          node-version: "12"
      - run: |
          cd calibrate/
          npm install
          CI=false npm run build

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Build and Push Docker Image
        run: |
          cd calibrate/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-app:${{ needs.image-tag.outputs.build_id }} .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-app:${{ needs.image-tag.outputs.build_id }}
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-app:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-app:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-app:latest

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Deploy to K8S
        run: |
          echo "=============== Update the corresponding configmap ==============="
          kubectl create configmap --dry-run=client -o yaml --from-env-file=calibrate/.env env-calibrate-prod | kubectl replace -f - -n production
          echo "=============== Deploy the application ==============="          
          kubectl apply -f k8s/calibrate/prod-airqo-calibrate-app.yaml
          kubectl set image deployment/airqo-calibrate-app prod-calibrate-app=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-app:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-calibrate-app kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-calibrate-app:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production

  ### deploy next platform ###
  next-platform:
    name: build-push-deploy-next-platform
    needs: [image-tag]
    if: inputs.next_platform == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google login
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Create .env file
        run: gcloud secrets versions access latest --secret="prod-env-next-platform" > platform/.env

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Build and Push Docker Image
        run: |
          cd platform/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-next-platform:${{ needs.image-tag.outputs.build_id }} .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-next-platform:${{ needs.image-tag.outputs.build_id }}
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-next-platform:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-next-platform:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-next-platform:latest

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Deploy to K8S
        run: |
          echo "=============== Update the corresponding configmap ==============="
          kubectl create configmap --dry-run=client -o yaml --from-env-file=platform/.env env-next-platform-production | kubectl replace -f - -n production
          echo "=============== Deploy the application ==============="          
          kubectl apply -f k8s/platform/prod-airqo-next-platform.yaml
          kubectl set image deployment/airqo-next-platform airqo-next-platform=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-next-platform:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-next-platform kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-next-platform:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production

  ### deploy docs ###
  docs:
    name: build-push-deploy-docs
    needs: [image-tag]
    if: inputs.docs == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Build and Push Docker Image
        run: |
          cd docs/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-prod-docs:${{ needs.image-tag.outputs.build_id }} .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-prod-docs:${{ needs.image-tag.outputs.build_id }}
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-prod-docs:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-prod-docs:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-prod-docs:latest

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/docs/prod-airqo-docs.yaml
          kubectl set image deployment/airqo-prod-docs airqo-prod-docs=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-prod-docs:${{ needs.image-tag.outputs.build_id }} -n production
          kubectl annotate deployment/airqo-prod-docs kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-prod-docs:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n production
